/*
* generated by Xtext
*/
package org.fuin.dsl.ddd.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DomainDrivenDesignDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainModel");
		private final Assignment cNamespaceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamespaceNamespaceParserRuleCall_0 = (RuleCall)cNamespaceAssignment.eContents().get(0);
		
		//DomainModel:
		//	namespace=Namespace;
		public ParserRule getRule() { return rule; }

		//namespace=Namespace
		public Assignment getNamespaceAssignment() { return cNamespaceAssignment; }

		//Namespace
		public RuleCall getNamespaceNamespaceParserRuleCall_0() { return cNamespaceNamespaceParserRuleCall_0; }
	}

	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsAbstractElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Namespace:
		//	"namespace" name=FQN "{" imports+=Import* elements+=AbstractElement* "}";
		public ParserRule getRule() { return rule; }

		//"namespace" name=FQN "{" imports+=Import* elements+=AbstractElement* "}"
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_4_0() { return cElementsAbstractElementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cImportedNamespaceAlternatives_1_0 = (Alternatives)cImportedNamespaceAssignment_1.eContents().get(0);
		private final RuleCall cImportedNamespaceFQNParserRuleCall_1_0_0 = (RuleCall)cImportedNamespaceAlternatives_1_0.eContents().get(0);
		private final RuleCall cImportedNamespaceFQNWithWildcardParserRuleCall_1_0_1 = (RuleCall)cImportedNamespaceAlternatives_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	"import" importedNamespace=(FQN | FQNWithWildcard) ";";
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=(FQN | FQNWithWildcard) ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=(FQN | FQNWithWildcard)
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//FQN | FQNWithWildcard
		public Alternatives getImportedNamespaceAlternatives_1_0() { return cImportedNamespaceAlternatives_1_0; }

		//FQN
		public RuleCall getImportedNamespaceFQNParserRuleCall_1_0_0() { return cImportedNamespaceFQNParserRuleCall_1_0_0; }

		//FQNWithWildcard
		public RuleCall getImportedNamespaceFQNWithWildcardParserRuleCall_1_0_1() { return cImportedNamespaceFQNWithWildcardParserRuleCall_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//	Constraint | Type;
		public ParserRule getRule() { return rule; }

		//Constraint | Type
		public Alternatives getAlternatives() { return cAlternatives; }

		//Constraint
		public RuleCall getConstraintParserRuleCall_0() { return cConstraintParserRuleCall_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExternalTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractVOParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAbstractEntityParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//	ExternalType | AbstractVO | AbstractEntity;
		public ParserRule getRule() { return rule; }

		//ExternalType | AbstractVO | AbstractEntity
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExternalType
		public RuleCall getExternalTypeParserRuleCall_0() { return cExternalTypeParserRuleCall_0; }

		//AbstractVO
		public RuleCall getAbstractVOParserRuleCall_1() { return cAbstractVOParserRuleCall_1; }

		//AbstractEntity
		public RuleCall getAbstractEntityParserRuleCall_2() { return cAbstractEntityParserRuleCall_2; }
	}

	public class AbstractVOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractVO");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAbstractEntityIdParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractVO:
		//	ValueObject | EnumObject | AbstractEntityId;
		public ParserRule getRule() { return rule; }

		//ValueObject | EnumObject | AbstractEntityId
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValueObject
		public RuleCall getValueObjectParserRuleCall_0() { return cValueObjectParserRuleCall_0; }

		//EnumObject
		public RuleCall getEnumObjectParserRuleCall_1() { return cEnumObjectParserRuleCall_1; }

		//AbstractEntityId
		public RuleCall getAbstractEntityIdParserRuleCall_2() { return cAbstractEntityIdParserRuleCall_2; }
	}

	public class AbstractEntityIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractEntityId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityIdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAggregateIdParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractEntityId:
		//	EntityId | AggregateId;
		public ParserRule getRule() { return rule; }

		//EntityId | AggregateId
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntityId
		public RuleCall getEntityIdParserRuleCall_0() { return cEntityIdParserRuleCall_0; }

		//AggregateId
		public RuleCall getAggregateIdParserRuleCall_1() { return cAggregateIdParserRuleCall_1; }
	}

	public class AbstractEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAggregateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractEntity:
		//	Entity | Aggregate;
		public ParserRule getRule() { return rule; }

		//Entity | Aggregate
		public Alternatives getAlternatives() { return cAlternatives; }

		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }

		//Aggregate
		public RuleCall getAggregateParserRuleCall_1() { return cAggregateParserRuleCall_1; }
	}

	public class ConstraintTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintTarget");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExternalTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstraintTarget:
		//	ExternalType | ValueObject;
		public ParserRule getRule() { return rule; }

		//ExternalType | ValueObject
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExternalType
		public RuleCall getExternalTypeParserRuleCall_0() { return cExternalTypeParserRuleCall_0; }

		//ValueObject
		public RuleCall getValueObjectParserRuleCall_1() { return cValueObjectParserRuleCall_1; }
	}

	public class ExternalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExternalType:
		//	"type" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"type" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOCTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cConstraintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetConstraintTargetCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetConstraintTargetIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetConstraintTargetCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExceptionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExceptionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExceptionIDTerminalRuleCall_5_1_0 = (RuleCall)cExceptionAssignment_5_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cVariablesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVariablesVariableParserRuleCall_7_0 = (RuleCall)cVariablesAssignment_7.eContents().get(0);
		private final Keyword cMessageKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMessageAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMessageSTRINGTerminalRuleCall_9_0 = (RuleCall)cMessageAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Constraint:
		//	doc=DOC "constraint" name=ID "on" target=[ConstraintTarget] ("exception" exception=ID)? "{" variables+=Variable*
		//	"message" message=STRING ";" "}";
		public ParserRule getRule() { return rule; }

		//doc=DOC "constraint" name=ID "on" target=[ConstraintTarget] ("exception" exception=ID)? "{" variables+=Variable*
		//"message" message=STRING ";" "}"
		public Group getGroup() { return cGroup; }

		//doc=DOC
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC
		public RuleCall getDocDOCTerminalRuleCall_0_0() { return cDocDOCTerminalRuleCall_0_0; }

		//"constraint"
		public Keyword getConstraintKeyword_1() { return cConstraintKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"on"
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }

		//target=[ConstraintTarget]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[ConstraintTarget]
		public CrossReference getTargetConstraintTargetCrossReference_4_0() { return cTargetConstraintTargetCrossReference_4_0; }

		//ID
		public RuleCall getTargetConstraintTargetIDTerminalRuleCall_4_0_1() { return cTargetConstraintTargetIDTerminalRuleCall_4_0_1; }

		//("exception" exception=ID)?
		public Group getGroup_5() { return cGroup_5; }

		//"exception"
		public Keyword getExceptionKeyword_5_0() { return cExceptionKeyword_5_0; }

		//exception=ID
		public Assignment getExceptionAssignment_5_1() { return cExceptionAssignment_5_1; }

		//ID
		public RuleCall getExceptionIDTerminalRuleCall_5_1_0() { return cExceptionIDTerminalRuleCall_5_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_7() { return cVariablesAssignment_7; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_7_0() { return cVariablesVariableParserRuleCall_7_0; }

		//"message"
		public Keyword getMessageKeyword_8() { return cMessageKeyword_8; }

		//message=STRING
		public Assignment getMessageAssignment_9() { return cMessageAssignment_9; }

		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_9_0() { return cMessageSTRINGTerminalRuleCall_9_0; }

		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class ValueObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOCTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cValueObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cBaseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBaseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cBaseExternalTypeCrossReference_3_1_0 = (CrossReference)cBaseAssignment_3_1.eContents().get(0);
		private final RuleCall cBaseExternalTypeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cBaseExternalTypeCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMetaInfoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMetaInfoTypeMetaInfoParserRuleCall_5_0 = (RuleCall)cMetaInfoAssignment_5.eContents().get(0);
		private final Assignment cVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariablesVariableParserRuleCall_6_0 = (RuleCall)cVariablesAssignment_6.eContents().get(0);
		private final Assignment cConstructorsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConstructorsConstructorParserRuleCall_7_0 = (RuleCall)cConstructorsAssignment_7.eContents().get(0);
		private final Assignment cMethodsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMethodsMethodParserRuleCall_8_0 = (RuleCall)cMethodsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ValueObject:
		//	doc=DOC "value-object" name=ID ("base" base=[ExternalType])? "{" metaInfo=TypeMetaInfo variables+=Variable*
		//	constructors+=Constructor* methods+=Method* "}";
		public ParserRule getRule() { return rule; }

		//doc=DOC "value-object" name=ID ("base" base=[ExternalType])? "{" metaInfo=TypeMetaInfo variables+=Variable*
		//constructors+=Constructor* methods+=Method* "}"
		public Group getGroup() { return cGroup; }

		//doc=DOC
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC
		public RuleCall getDocDOCTerminalRuleCall_0_0() { return cDocDOCTerminalRuleCall_0_0; }

		//"value-object"
		public Keyword getValueObjectKeyword_1() { return cValueObjectKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("base" base=[ExternalType])?
		public Group getGroup_3() { return cGroup_3; }

		//"base"
		public Keyword getBaseKeyword_3_0() { return cBaseKeyword_3_0; }

		//base=[ExternalType]
		public Assignment getBaseAssignment_3_1() { return cBaseAssignment_3_1; }

		//[ExternalType]
		public CrossReference getBaseExternalTypeCrossReference_3_1_0() { return cBaseExternalTypeCrossReference_3_1_0; }

		//ID
		public RuleCall getBaseExternalTypeIDTerminalRuleCall_3_1_0_1() { return cBaseExternalTypeIDTerminalRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//metaInfo=TypeMetaInfo
		public Assignment getMetaInfoAssignment_5() { return cMetaInfoAssignment_5; }

		//TypeMetaInfo
		public RuleCall getMetaInfoTypeMetaInfoParserRuleCall_5_0() { return cMetaInfoTypeMetaInfoParserRuleCall_5_0; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_6() { return cVariablesAssignment_6; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_6_0() { return cVariablesVariableParserRuleCall_6_0; }

		//constructors+=Constructor*
		public Assignment getConstructorsAssignment_7() { return cConstructorsAssignment_7; }

		//Constructor
		public RuleCall getConstructorsConstructorParserRuleCall_7_0() { return cConstructorsConstructorParserRuleCall_7_0; }

		//methods+=Method*
		public Assignment getMethodsAssignment_8() { return cMethodsAssignment_8; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_8_0() { return cMethodsMethodParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class EntityIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOCTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cEntityIdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cBaseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBaseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cBaseExternalTypeCrossReference_3_1_0 = (CrossReference)cBaseAssignment_3_1.eContents().get(0);
		private final RuleCall cBaseExternalTypeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cBaseExternalTypeCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMetaInfoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMetaInfoTypeMetaInfoParserRuleCall_5_0 = (RuleCall)cMetaInfoAssignment_5.eContents().get(0);
		private final Assignment cVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariablesVariableParserRuleCall_6_0 = (RuleCall)cVariablesAssignment_6.eContents().get(0);
		private final Assignment cConstructorsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConstructorsConstructorParserRuleCall_7_0 = (RuleCall)cConstructorsAssignment_7.eContents().get(0);
		private final Assignment cMethodsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMethodsMethodParserRuleCall_8_0 = (RuleCall)cMethodsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//EntityId:
		//	doc=DOC "entity-id" name=ID ("base" base=[ExternalType])? "{" metaInfo=TypeMetaInfo variables+=Variable*
		//	constructors+=Constructor* methods+=Method* "}";
		public ParserRule getRule() { return rule; }

		//doc=DOC "entity-id" name=ID ("base" base=[ExternalType])? "{" metaInfo=TypeMetaInfo variables+=Variable*
		//constructors+=Constructor* methods+=Method* "}"
		public Group getGroup() { return cGroup; }

		//doc=DOC
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC
		public RuleCall getDocDOCTerminalRuleCall_0_0() { return cDocDOCTerminalRuleCall_0_0; }

		//"entity-id"
		public Keyword getEntityIdKeyword_1() { return cEntityIdKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("base" base=[ExternalType])?
		public Group getGroup_3() { return cGroup_3; }

		//"base"
		public Keyword getBaseKeyword_3_0() { return cBaseKeyword_3_0; }

		//base=[ExternalType]
		public Assignment getBaseAssignment_3_1() { return cBaseAssignment_3_1; }

		//[ExternalType]
		public CrossReference getBaseExternalTypeCrossReference_3_1_0() { return cBaseExternalTypeCrossReference_3_1_0; }

		//ID
		public RuleCall getBaseExternalTypeIDTerminalRuleCall_3_1_0_1() { return cBaseExternalTypeIDTerminalRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//metaInfo=TypeMetaInfo
		public Assignment getMetaInfoAssignment_5() { return cMetaInfoAssignment_5; }

		//TypeMetaInfo
		public RuleCall getMetaInfoTypeMetaInfoParserRuleCall_5_0() { return cMetaInfoTypeMetaInfoParserRuleCall_5_0; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_6() { return cVariablesAssignment_6; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_6_0() { return cVariablesVariableParserRuleCall_6_0; }

		//constructors+=Constructor*
		public Assignment getConstructorsAssignment_7() { return cConstructorsAssignment_7; }

		//Constructor
		public RuleCall getConstructorsConstructorParserRuleCall_7_0() { return cConstructorsConstructorParserRuleCall_7_0; }

		//methods+=Method*
		public Assignment getMethodsAssignment_8() { return cMethodsAssignment_8; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_8_0() { return cMethodsMethodParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class AggregateIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AggregateId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOCTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cAggregateIdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cBaseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBaseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cBaseExternalTypeCrossReference_3_1_0 = (CrossReference)cBaseAssignment_3_1.eContents().get(0);
		private final RuleCall cBaseExternalTypeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cBaseExternalTypeCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMetaInfoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMetaInfoTypeMetaInfoParserRuleCall_5_0 = (RuleCall)cMetaInfoAssignment_5.eContents().get(0);
		private final Assignment cVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariablesVariableParserRuleCall_6_0 = (RuleCall)cVariablesAssignment_6.eContents().get(0);
		private final Assignment cConstructorsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConstructorsConstructorParserRuleCall_7_0 = (RuleCall)cConstructorsAssignment_7.eContents().get(0);
		private final Assignment cMethodsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMethodsMethodParserRuleCall_8_0 = (RuleCall)cMethodsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//AggregateId:
		//	doc=DOC "aggregate-id" name=ID ("base" base=[ExternalType])? "{" metaInfo=TypeMetaInfo variables+=Variable*
		//	constructors+=Constructor* methods+=Method* "}";
		public ParserRule getRule() { return rule; }

		//doc=DOC "aggregate-id" name=ID ("base" base=[ExternalType])? "{" metaInfo=TypeMetaInfo variables+=Variable*
		//constructors+=Constructor* methods+=Method* "}"
		public Group getGroup() { return cGroup; }

		//doc=DOC
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC
		public RuleCall getDocDOCTerminalRuleCall_0_0() { return cDocDOCTerminalRuleCall_0_0; }

		//"aggregate-id"
		public Keyword getAggregateIdKeyword_1() { return cAggregateIdKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("base" base=[ExternalType])?
		public Group getGroup_3() { return cGroup_3; }

		//"base"
		public Keyword getBaseKeyword_3_0() { return cBaseKeyword_3_0; }

		//base=[ExternalType]
		public Assignment getBaseAssignment_3_1() { return cBaseAssignment_3_1; }

		//[ExternalType]
		public CrossReference getBaseExternalTypeCrossReference_3_1_0() { return cBaseExternalTypeCrossReference_3_1_0; }

		//ID
		public RuleCall getBaseExternalTypeIDTerminalRuleCall_3_1_0_1() { return cBaseExternalTypeIDTerminalRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//metaInfo=TypeMetaInfo
		public Assignment getMetaInfoAssignment_5() { return cMetaInfoAssignment_5; }

		//TypeMetaInfo
		public RuleCall getMetaInfoTypeMetaInfoParserRuleCall_5_0() { return cMetaInfoTypeMetaInfoParserRuleCall_5_0; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_6() { return cVariablesAssignment_6; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_6_0() { return cVariablesVariableParserRuleCall_6_0; }

		//constructors+=Constructor*
		public Assignment getConstructorsAssignment_7() { return cConstructorsAssignment_7; }

		//Constructor
		public RuleCall getConstructorsConstructorParserRuleCall_7_0() { return cConstructorsConstructorParserRuleCall_7_0; }

		//methods+=Method*
		public Assignment getMethodsAssignment_8() { return cMethodsAssignment_8; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_8_0() { return cMethodsMethodParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class EnumObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOCTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMetaInfoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMetaInfoTypeMetaInfoParserRuleCall_4_0 = (RuleCall)cMetaInfoAssignment_4.eContents().get(0);
		private final Assignment cVariablesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariablesVariableParserRuleCall_5_0 = (RuleCall)cVariablesAssignment_5.eContents().get(0);
		private final Assignment cConstructorsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConstructorsConstructorParserRuleCall_6_0 = (RuleCall)cConstructorsAssignment_6.eContents().get(0);
		private final Assignment cMethodsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMethodsMethodParserRuleCall_7_0 = (RuleCall)cMethodsAssignment_7.eContents().get(0);
		private final Keyword cInstancesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cInstancesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cInstancesEnumInstanceParserRuleCall_10_0 = (RuleCall)cInstancesAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//EnumObject:
		//	doc=DOC "enum" name=ID "{" metaInfo=TypeMetaInfo variables+=Variable* constructors+=Constructor* methods+=Method*
		//	"instances" "{" instances+=EnumInstance+ "}" "}";
		public ParserRule getRule() { return rule; }

		//doc=DOC "enum" name=ID "{" metaInfo=TypeMetaInfo variables+=Variable* constructors+=Constructor* methods+=Method*
		//"instances" "{" instances+=EnumInstance+ "}" "}"
		public Group getGroup() { return cGroup; }

		//doc=DOC
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC
		public RuleCall getDocDOCTerminalRuleCall_0_0() { return cDocDOCTerminalRuleCall_0_0; }

		//"enum"
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//metaInfo=TypeMetaInfo
		public Assignment getMetaInfoAssignment_4() { return cMetaInfoAssignment_4; }

		//TypeMetaInfo
		public RuleCall getMetaInfoTypeMetaInfoParserRuleCall_4_0() { return cMetaInfoTypeMetaInfoParserRuleCall_4_0; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_5() { return cVariablesAssignment_5; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_5_0() { return cVariablesVariableParserRuleCall_5_0; }

		//constructors+=Constructor*
		public Assignment getConstructorsAssignment_6() { return cConstructorsAssignment_6; }

		//Constructor
		public RuleCall getConstructorsConstructorParserRuleCall_6_0() { return cConstructorsConstructorParserRuleCall_6_0; }

		//methods+=Method*
		public Assignment getMethodsAssignment_7() { return cMethodsAssignment_7; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_7_0() { return cMethodsMethodParserRuleCall_7_0; }

		//"instances"
		public Keyword getInstancesKeyword_8() { return cInstancesKeyword_8; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }

		//instances+=EnumInstance+
		public Assignment getInstancesAssignment_10() { return cInstancesAssignment_10; }

		//EnumInstance
		public RuleCall getInstancesEnumInstanceParserRuleCall_10_0() { return cInstancesEnumInstanceParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class EnumInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOCTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsLiteralParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsLiteralParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EnumInstance:
		//	doc=DOC name=ID ("(" params+=Literal ("," params+=Literal)* ")")? ";";
		public ParserRule getRule() { return rule; }

		//doc=DOC name=ID ("(" params+=Literal ("," params+=Literal)* ")")? ";"
		public Group getGroup() { return cGroup; }

		//doc=DOC
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC
		public RuleCall getDocDOCTerminalRuleCall_0_0() { return cDocDOCTerminalRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" params+=Literal ("," params+=Literal)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//params+=Literal
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//Literal
		public RuleCall getParamsLiteralParserRuleCall_2_1_0() { return cParamsLiteralParserRuleCall_2_1_0; }

		//("," params+=Literal)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=Literal
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//Literal
		public RuleCall getParamsLiteralParserRuleCall_2_2_1_0() { return cParamsLiteralParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOCTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cIdentifierKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cIdTypeEntityIdCrossReference_4_0 = (CrossReference)cIdTypeAssignment_4.eContents().get(0);
		private final RuleCall cIdTypeEntityIdIDTerminalRuleCall_4_0_1 = (RuleCall)cIdTypeEntityIdCrossReference_4_0.eContents().get(1);
		private final Keyword cRootKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRootAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRootAggregateCrossReference_6_0 = (CrossReference)cRootAssignment_6.eContents().get(0);
		private final RuleCall cRootAggregateIDTerminalRuleCall_6_0_1 = (RuleCall)cRootAggregateCrossReference_6_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMetaInfoAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMetaInfoTypeMetaInfoParserRuleCall_8_0 = (RuleCall)cMetaInfoAssignment_8.eContents().get(0);
		private final Assignment cVariablesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cVariablesVariableParserRuleCall_9_0 = (RuleCall)cVariablesAssignment_9.eContents().get(0);
		private final Assignment cConstructorsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cConstructorsConstructorParserRuleCall_10_0 = (RuleCall)cConstructorsAssignment_10.eContents().get(0);
		private final Assignment cMethodsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cMethodsMethodParserRuleCall_11_0 = (RuleCall)cMethodsAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Entity:
		//	doc=DOC "entity" name=ID "identifier" idType=[EntityId] "root" root=[Aggregate] "{" metaInfo=TypeMetaInfo
		//	variables+=Variable* constructors+=Constructor* methods+=Method* "}";
		public ParserRule getRule() { return rule; }

		//doc=DOC "entity" name=ID "identifier" idType=[EntityId] "root" root=[Aggregate] "{" metaInfo=TypeMetaInfo
		//variables+=Variable* constructors+=Constructor* methods+=Method* "}"
		public Group getGroup() { return cGroup; }

		//doc=DOC
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC
		public RuleCall getDocDOCTerminalRuleCall_0_0() { return cDocDOCTerminalRuleCall_0_0; }

		//"entity"
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"identifier"
		public Keyword getIdentifierKeyword_3() { return cIdentifierKeyword_3; }

		//idType=[EntityId]
		public Assignment getIdTypeAssignment_4() { return cIdTypeAssignment_4; }

		//[EntityId]
		public CrossReference getIdTypeEntityIdCrossReference_4_0() { return cIdTypeEntityIdCrossReference_4_0; }

		//ID
		public RuleCall getIdTypeEntityIdIDTerminalRuleCall_4_0_1() { return cIdTypeEntityIdIDTerminalRuleCall_4_0_1; }

		//"root"
		public Keyword getRootKeyword_5() { return cRootKeyword_5; }

		//root=[Aggregate]
		public Assignment getRootAssignment_6() { return cRootAssignment_6; }

		//[Aggregate]
		public CrossReference getRootAggregateCrossReference_6_0() { return cRootAggregateCrossReference_6_0; }

		//ID
		public RuleCall getRootAggregateIDTerminalRuleCall_6_0_1() { return cRootAggregateIDTerminalRuleCall_6_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//metaInfo=TypeMetaInfo
		public Assignment getMetaInfoAssignment_8() { return cMetaInfoAssignment_8; }

		//TypeMetaInfo
		public RuleCall getMetaInfoTypeMetaInfoParserRuleCall_8_0() { return cMetaInfoTypeMetaInfoParserRuleCall_8_0; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_9() { return cVariablesAssignment_9; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_9_0() { return cVariablesVariableParserRuleCall_9_0; }

		//constructors+=Constructor*
		public Assignment getConstructorsAssignment_10() { return cConstructorsAssignment_10; }

		//Constructor
		public RuleCall getConstructorsConstructorParserRuleCall_10_0() { return cConstructorsConstructorParserRuleCall_10_0; }

		//methods+=Method*
		public Assignment getMethodsAssignment_11() { return cMethodsAssignment_11; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_11_0() { return cMethodsMethodParserRuleCall_11_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class AggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOCTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cAggregateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cIdentifierKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cIdTypeAggregateIdCrossReference_4_0 = (CrossReference)cIdTypeAssignment_4.eContents().get(0);
		private final RuleCall cIdTypeAggregateIdIDTerminalRuleCall_4_0_1 = (RuleCall)cIdTypeAggregateIdCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMetaInfoAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMetaInfoTypeMetaInfoParserRuleCall_6_0 = (RuleCall)cMetaInfoAssignment_6.eContents().get(0);
		private final Assignment cVariablesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVariablesVariableParserRuleCall_7_0 = (RuleCall)cVariablesAssignment_7.eContents().get(0);
		private final Assignment cConstructorsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cConstructorsConstructorParserRuleCall_8_0 = (RuleCall)cConstructorsAssignment_8.eContents().get(0);
		private final Assignment cMethodsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMethodsMethodParserRuleCall_9_0 = (RuleCall)cMethodsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Aggregate:
		//	doc=DOC "aggregate" name=ID "identifier" idType=[AggregateId] "{" metaInfo=TypeMetaInfo variables+=Variable*
		//	constructors+=Constructor* methods+=Method* "}";
		public ParserRule getRule() { return rule; }

		//doc=DOC "aggregate" name=ID "identifier" idType=[AggregateId] "{" metaInfo=TypeMetaInfo variables+=Variable*
		//constructors+=Constructor* methods+=Method* "}"
		public Group getGroup() { return cGroup; }

		//doc=DOC
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC
		public RuleCall getDocDOCTerminalRuleCall_0_0() { return cDocDOCTerminalRuleCall_0_0; }

		//"aggregate"
		public Keyword getAggregateKeyword_1() { return cAggregateKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"identifier"
		public Keyword getIdentifierKeyword_3() { return cIdentifierKeyword_3; }

		//idType=[AggregateId]
		public Assignment getIdTypeAssignment_4() { return cIdTypeAssignment_4; }

		//[AggregateId]
		public CrossReference getIdTypeAggregateIdCrossReference_4_0() { return cIdTypeAggregateIdCrossReference_4_0; }

		//ID
		public RuleCall getIdTypeAggregateIdIDTerminalRuleCall_4_0_1() { return cIdTypeAggregateIdIDTerminalRuleCall_4_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//metaInfo=TypeMetaInfo
		public Assignment getMetaInfoAssignment_6() { return cMetaInfoAssignment_6; }

		//TypeMetaInfo
		public RuleCall getMetaInfoTypeMetaInfoParserRuleCall_6_0() { return cMetaInfoTypeMetaInfoParserRuleCall_6_0; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_7() { return cVariablesAssignment_7; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_7_0() { return cVariablesVariableParserRuleCall_7_0; }

		//constructors+=Constructor*
		public Assignment getConstructorsAssignment_8() { return cConstructorsAssignment_8; }

		//Constructor
		public RuleCall getConstructorsConstructorParserRuleCall_8_0() { return cConstructorsConstructorParserRuleCall_8_0; }

		//methods+=Method*
		public Assignment getMethodsAssignment_9() { return cMethodsAssignment_9; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_9_0() { return cMethodsMethodParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOCTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cConstructorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariablesVariableParserRuleCall_4_0 = (RuleCall)cVariablesAssignment_4.eContents().get(0);
		private final Assignment cConstraintsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConstraintsConstraintsParserRuleCall_5_0 = (RuleCall)cConstraintsAssignment_5.eContents().get(0);
		private final Assignment cEventsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEventsEventParserRuleCall_6_0 = (RuleCall)cEventsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Constructor:
		//	doc=DOC? "constructor" name=ID "{" variables+=Variable* constraints=Constraints? events+=Event* "}";
		public ParserRule getRule() { return rule; }

		//doc=DOC? "constructor" name=ID "{" variables+=Variable* constraints=Constraints? events+=Event* "}"
		public Group getGroup() { return cGroup; }

		//doc=DOC?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC
		public RuleCall getDocDOCTerminalRuleCall_0_0() { return cDocDOCTerminalRuleCall_0_0; }

		//"constructor"
		public Keyword getConstructorKeyword_1() { return cConstructorKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_4() { return cVariablesAssignment_4; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_4_0() { return cVariablesVariableParserRuleCall_4_0; }

		//constraints=Constraints?
		public Assignment getConstraintsAssignment_5() { return cConstraintsAssignment_5; }

		//Constraints
		public RuleCall getConstraintsConstraintsParserRuleCall_5_0() { return cConstraintsConstraintsParserRuleCall_5_0; }

		//events+=Event*
		public Assignment getEventsAssignment_6() { return cEventsAssignment_6; }

		//Event
		public RuleCall getEventsEventParserRuleCall_6_0() { return cEventsEventParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOCTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cMethodKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRefKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRefMethodAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefMethodMethodCrossReference_3_1_0 = (CrossReference)cRefMethodAssignment_3_1.eContents().get(0);
		private final RuleCall cRefMethodMethodFQNParserRuleCall_3_1_0_1 = (RuleCall)cRefMethodMethodCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVariablesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariablesVariableParserRuleCall_5_0 = (RuleCall)cVariablesAssignment_5.eContents().get(0);
		private final Assignment cConstraintsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConstraintsConstraintsParserRuleCall_6_0 = (RuleCall)cConstraintsAssignment_6.eContents().get(0);
		private final Assignment cEventsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEventsEventParserRuleCall_7_0 = (RuleCall)cEventsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Method:
		//	doc=DOC? "method" name=ID ("ref" refMethod=[Method|FQN])? "{" variables+=Variable* constraints=Constraints?
		//	events+=Event* "}";
		public ParserRule getRule() { return rule; }

		//doc=DOC? "method" name=ID ("ref" refMethod=[Method|FQN])? "{" variables+=Variable* constraints=Constraints?
		//events+=Event* "}"
		public Group getGroup() { return cGroup; }

		//doc=DOC?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC
		public RuleCall getDocDOCTerminalRuleCall_0_0() { return cDocDOCTerminalRuleCall_0_0; }

		//"method"
		public Keyword getMethodKeyword_1() { return cMethodKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("ref" refMethod=[Method|FQN])?
		public Group getGroup_3() { return cGroup_3; }

		//"ref"
		public Keyword getRefKeyword_3_0() { return cRefKeyword_3_0; }

		//refMethod=[Method|FQN]
		public Assignment getRefMethodAssignment_3_1() { return cRefMethodAssignment_3_1; }

		//[Method|FQN]
		public CrossReference getRefMethodMethodCrossReference_3_1_0() { return cRefMethodMethodCrossReference_3_1_0; }

		//FQN
		public RuleCall getRefMethodMethodFQNParserRuleCall_3_1_0_1() { return cRefMethodMethodFQNParserRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_5() { return cVariablesAssignment_5; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_5_0() { return cVariablesVariableParserRuleCall_5_0; }

		//constraints=Constraints?
		public Assignment getConstraintsAssignment_6() { return cConstraintsAssignment_6; }

		//Constraints
		public RuleCall getConstraintsConstraintsParserRuleCall_6_0() { return cConstraintsConstraintsParserRuleCall_6_0; }

		//events+=Event*
		public Assignment getEventsAssignment_7() { return cEventsAssignment_7; }

		//Event
		public RuleCall getEventsEventParserRuleCall_7_0() { return cEventsEventParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOCTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariablesVariableParserRuleCall_4_0 = (RuleCall)cVariablesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Event:
		//	doc=DOC? "event" name=ID "{" variables+=Variable* "}";
		public ParserRule getRule() { return rule; }

		//doc=DOC? "event" name=ID "{" variables+=Variable* "}"
		public Group getGroup() { return cGroup; }

		//doc=DOC?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC
		public RuleCall getDocDOCTerminalRuleCall_0_0() { return cDocDOCTerminalRuleCall_0_0; }

		//"event"
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_4() { return cVariablesAssignment_4; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_4_0() { return cVariablesVariableParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TypeMetaInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeMetaInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeMetaInfoAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSlabelKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSlabelAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSlabelSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cSlabelAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLabelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTooltippKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTooltippAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTooltippSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cTooltippAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPromptKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPromptAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPromptSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cPromptAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExamplesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExamplesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExamplesSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cExamplesAssignment_5_1.eContents().get(0);
		
		//TypeMetaInfo:
		//	{TypeMetaInfo} ("slabel" slabel=STRING)? ("label" label=STRING)? ("tooltipp" tooltipp=STRING)? ("prompt"
		//	prompt=STRING)? ("examples" examples+=STRING*)?;
		public ParserRule getRule() { return rule; }

		//{TypeMetaInfo} ("slabel" slabel=STRING)? ("label" label=STRING)? ("tooltipp" tooltipp=STRING)? ("prompt" prompt=STRING)?
		//("examples" examples+=STRING*)?
		public Group getGroup() { return cGroup; }

		//{TypeMetaInfo}
		public Action getTypeMetaInfoAction_0() { return cTypeMetaInfoAction_0; }

		//("slabel" slabel=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"slabel"
		public Keyword getSlabelKeyword_1_0() { return cSlabelKeyword_1_0; }

		//slabel=STRING
		public Assignment getSlabelAssignment_1_1() { return cSlabelAssignment_1_1; }

		//STRING
		public RuleCall getSlabelSTRINGTerminalRuleCall_1_1_0() { return cSlabelSTRINGTerminalRuleCall_1_1_0; }

		//("label" label=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"label"
		public Keyword getLabelKeyword_2_0() { return cLabelKeyword_2_0; }

		//label=STRING
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_1_0() { return cLabelSTRINGTerminalRuleCall_2_1_0; }

		//("tooltipp" tooltipp=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"tooltipp"
		public Keyword getTooltippKeyword_3_0() { return cTooltippKeyword_3_0; }

		//tooltipp=STRING
		public Assignment getTooltippAssignment_3_1() { return cTooltippAssignment_3_1; }

		//STRING
		public RuleCall getTooltippSTRINGTerminalRuleCall_3_1_0() { return cTooltippSTRINGTerminalRuleCall_3_1_0; }

		//("prompt" prompt=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"prompt"
		public Keyword getPromptKeyword_4_0() { return cPromptKeyword_4_0; }

		//prompt=STRING
		public Assignment getPromptAssignment_4_1() { return cPromptAssignment_4_1; }

		//STRING
		public RuleCall getPromptSTRINGTerminalRuleCall_4_1_0() { return cPromptSTRINGTerminalRuleCall_4_1_0; }

		//("examples" examples+=STRING*)?
		public Group getGroup_5() { return cGroup_5; }

		//"examples"
		public Keyword getExamplesKeyword_5_0() { return cExamplesKeyword_5_0; }

		//examples+=STRING*
		public Assignment getExamplesAssignment_5_1() { return cExamplesAssignment_5_1; }

		//STRING
		public RuleCall getExamplesSTRINGTerminalRuleCall_5_1_0() { return cExamplesSTRINGTerminalRuleCall_5_1_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOCTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Assignment cNullableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNullableNullableKeyword_1_0 = (Keyword)cNullableAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cMultiplicityAsteriskKeyword_3_0 = (Keyword)cMultiplicityAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cInvariantsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInvariantsInvariantsParserRuleCall_5_0 = (RuleCall)cInvariantsAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cOverriddenAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cOverriddenOverriddenTypeMetaInfoParserRuleCall_6_0_0 = (RuleCall)cOverriddenAssignment_6_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		
		//Variable:
		//	doc=DOC? nullable="nullable"? type=[Type] multiplicity="*"? name=ID invariants=Invariants?
		//	(overridden=OverriddenTypeMetaInfo? | ";");
		public ParserRule getRule() { return rule; }

		//doc=DOC? nullable="nullable"? type=[Type] multiplicity="*"? name=ID invariants=Invariants?
		//(overridden=OverriddenTypeMetaInfo? | ";")
		public Group getGroup() { return cGroup; }

		//doc=DOC?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC
		public RuleCall getDocDOCTerminalRuleCall_0_0() { return cDocDOCTerminalRuleCall_0_0; }

		//nullable="nullable"?
		public Assignment getNullableAssignment_1() { return cNullableAssignment_1; }

		//"nullable"
		public Keyword getNullableNullableKeyword_1_0() { return cNullableNullableKeyword_1_0; }

		//type=[Type]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_2_0_1() { return cTypeTypeIDTerminalRuleCall_2_0_1; }

		//multiplicity="*"?
		public Assignment getMultiplicityAssignment_3() { return cMultiplicityAssignment_3; }

		//"*"
		public Keyword getMultiplicityAsteriskKeyword_3_0() { return cMultiplicityAsteriskKeyword_3_0; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//invariants=Invariants?
		public Assignment getInvariantsAssignment_5() { return cInvariantsAssignment_5; }

		//Invariants
		public RuleCall getInvariantsInvariantsParserRuleCall_5_0() { return cInvariantsInvariantsParserRuleCall_5_0; }

		//overridden=OverriddenTypeMetaInfo? | ";"
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//overridden=OverriddenTypeMetaInfo?
		public Assignment getOverriddenAssignment_6_0() { return cOverriddenAssignment_6_0; }

		//OverriddenTypeMetaInfo
		public RuleCall getOverriddenOverriddenTypeMetaInfoParserRuleCall_6_0_0() { return cOverriddenOverriddenTypeMetaInfoParserRuleCall_6_0_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
	}

	public class ConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraints");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCallsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCallsConstraintCallParserRuleCall_2_0 = (RuleCall)cCallsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCallsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCallsConstraintCallParserRuleCall_3_1_0 = (RuleCall)cCallsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constraints:
		//	"constraints" "{" calls+=ConstraintCall ("," calls+=ConstraintCall)* "}";
		public ParserRule getRule() { return rule; }

		//"constraints" "{" calls+=ConstraintCall ("," calls+=ConstraintCall)* "}"
		public Group getGroup() { return cGroup; }

		//"constraints"
		public Keyword getConstraintsKeyword_0() { return cConstraintsKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//calls+=ConstraintCall
		public Assignment getCallsAssignment_2() { return cCallsAssignment_2; }

		//ConstraintCall
		public RuleCall getCallsConstraintCallParserRuleCall_2_0() { return cCallsConstraintCallParserRuleCall_2_0; }

		//("," calls+=ConstraintCall)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//calls+=ConstraintCall
		public Assignment getCallsAssignment_3_1() { return cCallsAssignment_3_1; }

		//ConstraintCall
		public RuleCall getCallsConstraintCallParserRuleCall_3_1_0() { return cCallsConstraintCallParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InvariantsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Invariants");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvariantsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCallsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallsConstraintCallParserRuleCall_1_0 = (RuleCall)cCallsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCallsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCallsConstraintCallParserRuleCall_2_1_0 = (RuleCall)cCallsAssignment_2_1.eContents().get(0);
		
		//Invariants:
		//	"invariants" calls+=ConstraintCall ("," calls+=ConstraintCall)*;
		public ParserRule getRule() { return rule; }

		//"invariants" calls+=ConstraintCall ("," calls+=ConstraintCall)*
		public Group getGroup() { return cGroup; }

		//"invariants"
		public Keyword getInvariantsKeyword_0() { return cInvariantsKeyword_0; }

		//calls+=ConstraintCall
		public Assignment getCallsAssignment_1() { return cCallsAssignment_1; }

		//ConstraintCall
		public RuleCall getCallsConstraintCallParserRuleCall_1_0() { return cCallsConstraintCallParserRuleCall_1_0; }

		//("," calls+=ConstraintCall)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//calls+=ConstraintCall
		public Assignment getCallsAssignment_2_1() { return cCallsAssignment_2_1; }

		//ConstraintCall
		public RuleCall getCallsConstraintCallParserRuleCall_2_1_0() { return cCallsConstraintCallParserRuleCall_2_1_0; }
	}

	public class OverriddenTypeMetaInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OverriddenTypeMetaInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetaInfoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetaInfoTypeMetaInfoParserRuleCall_1_0 = (RuleCall)cMetaInfoAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//OverriddenTypeMetaInfo:
		//	"{" metaInfo=TypeMetaInfo "}";
		public ParserRule getRule() { return rule; }

		//"{" metaInfo=TypeMetaInfo "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//metaInfo=TypeMetaInfo
		public Assignment getMetaInfoAssignment_1() { return cMetaInfoAssignment_1; }

		//TypeMetaInfo
		public RuleCall getMetaInfoTypeMetaInfoParserRuleCall_1_0() { return cMetaInfoTypeMetaInfoParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class ConstraintCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstraintAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cConstraintConstraintCrossReference_0_0 = (CrossReference)cConstraintAssignment_0.eContents().get(0);
		private final RuleCall cConstraintConstraintIDTerminalRuleCall_0_0_1 = (RuleCall)cConstraintConstraintCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsLiteralParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParamsLiteralParserRuleCall_1_2_1_0 = (RuleCall)cParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ConstraintCall:
		//	constraint=[Constraint] ("(" params+=Literal ("," params+=Literal)* ")")?;
		public ParserRule getRule() { return rule; }

		//constraint=[Constraint] ("(" params+=Literal ("," params+=Literal)* ")")?
		public Group getGroup() { return cGroup; }

		//constraint=[Constraint]
		public Assignment getConstraintAssignment_0() { return cConstraintAssignment_0; }

		//[Constraint]
		public CrossReference getConstraintConstraintCrossReference_0_0() { return cConstraintConstraintCrossReference_0_0; }

		//ID
		public RuleCall getConstraintConstraintIDTerminalRuleCall_0_0_1() { return cConstraintConstraintIDTerminalRuleCall_0_0_1; }

		//("(" params+=Literal ("," params+=Literal)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//params+=Literal
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//Literal
		public RuleCall getParamsLiteralParserRuleCall_1_1_0() { return cParamsLiteralParserRuleCall_1_1_0; }

		//("," params+=Literal)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//params+=Literal
		public Assignment getParamsAssignment_1_2_1() { return cParamsAssignment_1_2_1; }

		//Literal
		public RuleCall getParamsLiteralParserRuleCall_1_2_1_0() { return cParamsLiteralParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNullLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal:
		//	NullLiteral | BooleanLiteral | NumberLiteral | StringLiteral;
		public ParserRule getRule() { return rule; }

		//NullLiteral | BooleanLiteral | NumberLiteral | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_0() { return cNullLiteralParserRuleCall_0; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1() { return cBooleanLiteralParserRuleCall_1; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_2() { return cNumberLiteralParserRuleCall_2; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_3() { return cStringLiteralParserRuleCall_3; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class FQNWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQNWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFQNParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FQNWithWildcard:
		//	FQN "." "*";
		public ParserRule getRule() { return rule; }

		//FQN "." "*"
		public Group getGroup() { return cGroup; }

		//FQN
		public RuleCall getFQNParserRuleCall_0() { return cFQNParserRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final Keyword cValueFalseKeyword_1_0_0 = (Keyword)cValueAlternatives_1_0.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_1 = (Keyword)cValueAlternatives_1_0.eContents().get(1);
		
		//BooleanLiteral:
		//	{BooleanLiteral} value=("false" | "true");
		public ParserRule getRule() { return rule; }

		//{BooleanLiteral} value=("false" | "true")
		public Group getGroup() { return cGroup; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }

		//value=("false" | "true")
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"false" | "true"
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//"false"
		public Keyword getValueFalseKeyword_1_0_0() { return cValueFalseKeyword_1_0_0; }

		//"true"
		public Keyword getValueTrueKeyword_1_0_1() { return cValueTrueKeyword_1_0_1; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cValueNullKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		
		//NullLiteral:
		//	{NullLiteral} value="null";
		public ParserRule getRule() { return rule; }

		//{NullLiteral} value="null"
		public Group getGroup() { return cGroup; }

		//{NullLiteral}
		public Action getNullLiteralAction_0() { return cNullLiteralAction_0; }

		//value="null"
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"null"
		public Keyword getValueNullKeyword_1_0() { return cValueNullKeyword_1_0; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumberLiteral:
		//	{NumberLiteral} value=Number;
		public ParserRule getRule() { return rule; }

		//{NumberLiteral} value=Number
		public Group getGroup() { return cGroup; }

		//{NumberLiteral}
		public Action getNumberLiteralAction_0() { return cNumberLiteralAction_0; }

		//value=Number
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Number
		public RuleCall getValueNumberParserRuleCall_1_0() { return cValueNumberParserRuleCall_1_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringLiteral:
		//	{StringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{StringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_1_0 = (RuleCall)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_1_1_1 = (RuleCall)cAlternatives_1_1_1.eContents().get(1);
		
		//Number hidden():
		//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
		public ParserRule getRule() { return rule; }

		//HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?
		public Alternatives getAlternatives() { return cAlternatives; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_0() { return cHEXTerminalRuleCall_0; }

		//(INT | DECIMAL) ("." (INT | DECIMAL))?
		public Group getGroup_1() { return cGroup_1; }

		//INT | DECIMAL
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_0() { return cINTTerminalRuleCall_1_0_0; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_0_1() { return cDECIMALTerminalRuleCall_1_0_1; }

		//("." (INT | DECIMAL))?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//INT | DECIMAL
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1_0() { return cINTTerminalRuleCall_1_1_1_0; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_1_1_1() { return cDECIMALTerminalRuleCall_1_1_1_1; }
	}
	
	
	private DomainModelElements pDomainModel;
	private NamespaceElements pNamespace;
	private ImportElements pImport;
	private AbstractElementElements pAbstractElement;
	private TypeElements pType;
	private AbstractVOElements pAbstractVO;
	private AbstractEntityIdElements pAbstractEntityId;
	private AbstractEntityElements pAbstractEntity;
	private ConstraintTargetElements pConstraintTarget;
	private ExternalTypeElements pExternalType;
	private ConstraintElements pConstraint;
	private ValueObjectElements pValueObject;
	private EntityIdElements pEntityId;
	private AggregateIdElements pAggregateId;
	private EnumObjectElements pEnumObject;
	private EnumInstanceElements pEnumInstance;
	private EntityElements pEntity;
	private AggregateElements pAggregate;
	private ConstructorElements pConstructor;
	private MethodElements pMethod;
	private EventElements pEvent;
	private TypeMetaInfoElements pTypeMetaInfo;
	private VariableElements pVariable;
	private ConstraintsElements pConstraints;
	private InvariantsElements pInvariants;
	private OverriddenTypeMetaInfoElements pOverriddenTypeMetaInfo;
	private ConstraintCallElements pConstraintCall;
	private LiteralElements pLiteral;
	private FQNElements pFQN;
	private FQNWithWildcardElements pFQNWithWildcard;
	private BooleanLiteralElements pBooleanLiteral;
	private NullLiteralElements pNullLiteral;
	private NumberLiteralElements pNumberLiteral;
	private StringLiteralElements pStringLiteral;
	private TerminalRule tID;
	private TerminalRule tSTRING;
	private NumberElements pNumber;
	private TerminalRule tHEX;
	private TerminalRule tINT;
	private TerminalRule tDECIMAL;
	private TerminalRule tDOC;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public DomainDrivenDesignDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.fuin.dsl.ddd.DomainDrivenDesignDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//DomainModel:
	//	namespace=Namespace;
	public DomainModelElements getDomainModelAccess() {
		return (pDomainModel != null) ? pDomainModel : (pDomainModel = new DomainModelElements());
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}

	//Namespace:
	//	"namespace" name=FQN "{" imports+=Import* elements+=AbstractElement* "}";
	public NamespaceElements getNamespaceAccess() {
		return (pNamespace != null) ? pNamespace : (pNamespace = new NamespaceElements());
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=(FQN | FQNWithWildcard) ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//AbstractElement:
	//	Constraint | Type;
	public AbstractElementElements getAbstractElementAccess() {
		return (pAbstractElement != null) ? pAbstractElement : (pAbstractElement = new AbstractElementElements());
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//Type:
	//	ExternalType | AbstractVO | AbstractEntity;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//AbstractVO:
	//	ValueObject | EnumObject | AbstractEntityId;
	public AbstractVOElements getAbstractVOAccess() {
		return (pAbstractVO != null) ? pAbstractVO : (pAbstractVO = new AbstractVOElements());
	}
	
	public ParserRule getAbstractVORule() {
		return getAbstractVOAccess().getRule();
	}

	//AbstractEntityId:
	//	EntityId | AggregateId;
	public AbstractEntityIdElements getAbstractEntityIdAccess() {
		return (pAbstractEntityId != null) ? pAbstractEntityId : (pAbstractEntityId = new AbstractEntityIdElements());
	}
	
	public ParserRule getAbstractEntityIdRule() {
		return getAbstractEntityIdAccess().getRule();
	}

	//AbstractEntity:
	//	Entity | Aggregate;
	public AbstractEntityElements getAbstractEntityAccess() {
		return (pAbstractEntity != null) ? pAbstractEntity : (pAbstractEntity = new AbstractEntityElements());
	}
	
	public ParserRule getAbstractEntityRule() {
		return getAbstractEntityAccess().getRule();
	}

	//ConstraintTarget:
	//	ExternalType | ValueObject;
	public ConstraintTargetElements getConstraintTargetAccess() {
		return (pConstraintTarget != null) ? pConstraintTarget : (pConstraintTarget = new ConstraintTargetElements());
	}
	
	public ParserRule getConstraintTargetRule() {
		return getConstraintTargetAccess().getRule();
	}

	//ExternalType:
	//	"type" name=ID ";";
	public ExternalTypeElements getExternalTypeAccess() {
		return (pExternalType != null) ? pExternalType : (pExternalType = new ExternalTypeElements());
	}
	
	public ParserRule getExternalTypeRule() {
		return getExternalTypeAccess().getRule();
	}

	//Constraint:
	//	doc=DOC "constraint" name=ID "on" target=[ConstraintTarget] ("exception" exception=ID)? "{" variables+=Variable*
	//	"message" message=STRING ";" "}";
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//ValueObject:
	//	doc=DOC "value-object" name=ID ("base" base=[ExternalType])? "{" metaInfo=TypeMetaInfo variables+=Variable*
	//	constructors+=Constructor* methods+=Method* "}";
	public ValueObjectElements getValueObjectAccess() {
		return (pValueObject != null) ? pValueObject : (pValueObject = new ValueObjectElements());
	}
	
	public ParserRule getValueObjectRule() {
		return getValueObjectAccess().getRule();
	}

	//EntityId:
	//	doc=DOC "entity-id" name=ID ("base" base=[ExternalType])? "{" metaInfo=TypeMetaInfo variables+=Variable*
	//	constructors+=Constructor* methods+=Method* "}";
	public EntityIdElements getEntityIdAccess() {
		return (pEntityId != null) ? pEntityId : (pEntityId = new EntityIdElements());
	}
	
	public ParserRule getEntityIdRule() {
		return getEntityIdAccess().getRule();
	}

	//AggregateId:
	//	doc=DOC "aggregate-id" name=ID ("base" base=[ExternalType])? "{" metaInfo=TypeMetaInfo variables+=Variable*
	//	constructors+=Constructor* methods+=Method* "}";
	public AggregateIdElements getAggregateIdAccess() {
		return (pAggregateId != null) ? pAggregateId : (pAggregateId = new AggregateIdElements());
	}
	
	public ParserRule getAggregateIdRule() {
		return getAggregateIdAccess().getRule();
	}

	//EnumObject:
	//	doc=DOC "enum" name=ID "{" metaInfo=TypeMetaInfo variables+=Variable* constructors+=Constructor* methods+=Method*
	//	"instances" "{" instances+=EnumInstance+ "}" "}";
	public EnumObjectElements getEnumObjectAccess() {
		return (pEnumObject != null) ? pEnumObject : (pEnumObject = new EnumObjectElements());
	}
	
	public ParserRule getEnumObjectRule() {
		return getEnumObjectAccess().getRule();
	}

	//EnumInstance:
	//	doc=DOC name=ID ("(" params+=Literal ("," params+=Literal)* ")")? ";";
	public EnumInstanceElements getEnumInstanceAccess() {
		return (pEnumInstance != null) ? pEnumInstance : (pEnumInstance = new EnumInstanceElements());
	}
	
	public ParserRule getEnumInstanceRule() {
		return getEnumInstanceAccess().getRule();
	}

	//Entity:
	//	doc=DOC "entity" name=ID "identifier" idType=[EntityId] "root" root=[Aggregate] "{" metaInfo=TypeMetaInfo
	//	variables+=Variable* constructors+=Constructor* methods+=Method* "}";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Aggregate:
	//	doc=DOC "aggregate" name=ID "identifier" idType=[AggregateId] "{" metaInfo=TypeMetaInfo variables+=Variable*
	//	constructors+=Constructor* methods+=Method* "}";
	public AggregateElements getAggregateAccess() {
		return (pAggregate != null) ? pAggregate : (pAggregate = new AggregateElements());
	}
	
	public ParserRule getAggregateRule() {
		return getAggregateAccess().getRule();
	}

	//Constructor:
	//	doc=DOC? "constructor" name=ID "{" variables+=Variable* constraints=Constraints? events+=Event* "}";
	public ConstructorElements getConstructorAccess() {
		return (pConstructor != null) ? pConstructor : (pConstructor = new ConstructorElements());
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}

	//Method:
	//	doc=DOC? "method" name=ID ("ref" refMethod=[Method|FQN])? "{" variables+=Variable* constraints=Constraints?
	//	events+=Event* "}";
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//Event:
	//	doc=DOC? "event" name=ID "{" variables+=Variable* "}";
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//TypeMetaInfo:
	//	{TypeMetaInfo} ("slabel" slabel=STRING)? ("label" label=STRING)? ("tooltipp" tooltipp=STRING)? ("prompt"
	//	prompt=STRING)? ("examples" examples+=STRING*)?;
	public TypeMetaInfoElements getTypeMetaInfoAccess() {
		return (pTypeMetaInfo != null) ? pTypeMetaInfo : (pTypeMetaInfo = new TypeMetaInfoElements());
	}
	
	public ParserRule getTypeMetaInfoRule() {
		return getTypeMetaInfoAccess().getRule();
	}

	//Variable:
	//	doc=DOC? nullable="nullable"? type=[Type] multiplicity="*"? name=ID invariants=Invariants?
	//	(overridden=OverriddenTypeMetaInfo? | ";");
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Constraints:
	//	"constraints" "{" calls+=ConstraintCall ("," calls+=ConstraintCall)* "}";
	public ConstraintsElements getConstraintsAccess() {
		return (pConstraints != null) ? pConstraints : (pConstraints = new ConstraintsElements());
	}
	
	public ParserRule getConstraintsRule() {
		return getConstraintsAccess().getRule();
	}

	//Invariants:
	//	"invariants" calls+=ConstraintCall ("," calls+=ConstraintCall)*;
	public InvariantsElements getInvariantsAccess() {
		return (pInvariants != null) ? pInvariants : (pInvariants = new InvariantsElements());
	}
	
	public ParserRule getInvariantsRule() {
		return getInvariantsAccess().getRule();
	}

	//OverriddenTypeMetaInfo:
	//	"{" metaInfo=TypeMetaInfo "}";
	public OverriddenTypeMetaInfoElements getOverriddenTypeMetaInfoAccess() {
		return (pOverriddenTypeMetaInfo != null) ? pOverriddenTypeMetaInfo : (pOverriddenTypeMetaInfo = new OverriddenTypeMetaInfoElements());
	}
	
	public ParserRule getOverriddenTypeMetaInfoRule() {
		return getOverriddenTypeMetaInfoAccess().getRule();
	}

	//ConstraintCall:
	//	constraint=[Constraint] ("(" params+=Literal ("," params+=Literal)* ")")?;
	public ConstraintCallElements getConstraintCallAccess() {
		return (pConstraintCall != null) ? pConstraintCall : (pConstraintCall = new ConstraintCallElements());
	}
	
	public ParserRule getConstraintCallRule() {
		return getConstraintCallAccess().getRule();
	}

	//Literal:
	//	NullLiteral | BooleanLiteral | NumberLiteral | StringLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//FQNWithWildcard:
	//	FQN "." "*";
	public FQNWithWildcardElements getFQNWithWildcardAccess() {
		return (pFQNWithWildcard != null) ? pFQNWithWildcard : (pFQNWithWildcard = new FQNWithWildcardElements());
	}
	
	public ParserRule getFQNWithWildcardRule() {
		return getFQNWithWildcardAccess().getRule();
	}

	//BooleanLiteral:
	//	{BooleanLiteral} value=("false" | "true");
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NullLiteral:
	//	{NullLiteral} value="null";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//NumberLiteral:
	//	{NumberLiteral} value=Number;
	public NumberLiteralElements getNumberLiteralAccess() {
		return (pNumberLiteral != null) ? pNumberLiteral : (pNumberLiteral = new NumberLiteralElements());
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//StringLiteral:
	//	{StringLiteral} value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//terminal ID:
	//	("A".."Z" | "a".."z") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return (tDECIMAL != null) ? tDECIMAL : (tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL"));
	} 

	//// Documentation
	//terminal DOC:
	//	"/ **"->"* /";
	public TerminalRule getDOCRule() {
		return (tDOC != null) ? tDOC : (tDOC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOC"));
	} 

	//// Multi line comment		 
	//terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//// Single line comment
	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//// Whitespace - Anything that is ignored.
	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
